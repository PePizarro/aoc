package main

import (
	"bufio"
	"errors"
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"
)

func readFile(filename string) ([]string, error) {

	file, err := os.Open(filename)
	if err != nil {
		return nil, errors.New("error reading file")
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	var lines []string

	for scanner.Scan() {
		line := scanner.Text()
		lines = append(lines, line)
	}

	return lines, nil
}

func checkHand(hand string, bag map[string]int) bool {

	re := regexp.MustCompile(`(\d+) (\w+)`)
	matches := re.FindAllStringSubmatch(hand, -1)
	colorCounts := make(map[string]int)

	for _, match := range matches {
		count, err := strconv.Atoi(match[1])
		if err != nil {
			fmt.Printf("Error converting count to integer: %v\n", err)
			continue
		}

		color := match[2]
		colorCounts[color] = count
	}

	for c, q := range colorCounts {
		if q > bag[c] {
			return false
		}
	}

	return true

}

func checkGame(game string, bag map[string]int) (int, bool) {
	re := regexp.MustCompile(`Game (\d+):`)
	match := re.FindStringSubmatch(game)
	if len(match) != 2 {
		fmt.Println("Error parsing game number")
	}
	id, err := strconv.Atoi(match[1])
	if err != nil {
		fmt.Println("Error converting game number to integer")
	}

	// parse hands, check for each one of them
	hands := re.ReplaceAllString(game, "")
	handsSlice := strings.Split(hands, ";")

	for _, h := range handsSlice {
		possible := checkHand(h, bag)
		if !possible {
			return 0, false
		}
	}

	return id, true
}

func checkAllGames(games []string, bag map[string]int) int {
	sum := 0

	for _, g := range games {
		id, possible := checkGame(g, bag)
		if possible {
			sum += id
		}
	}

	return sum
}

func main() {

	games, err := readFile("input.txt")
	if err != nil {
		fmt.Println(err)
		panic(err)
	}

	bag := map[string]int{
		"red":   12,
		"green": 13,
		"blue":  14,
	}

	fmt.Println(checkAllGames(games, bag))

}
